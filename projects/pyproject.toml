[tool.ruff]
# Match nvim ruff configuration for consistent experience
line-length = 88
target-version = "py311"
exclude = [
    "venv",
    ".venv",
    "__pycache__",
    ".git",
    ".ruff_cache",
]

[tool.ruff.lint]
# Enable comprehensive rule set for ML/AI development
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort (import sorting)
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "PIE",  # flake8-pie
    "PL",   # pylint
    "RUF",  # ruff-specific rules
    "NPY",  # numpy best practices
    "PERF", # performance optimizations
    "FURB", # refurb modernization
    "PTH",  # pathlib usage
    "ASYNC", # async/parallel patterns
]

# Ignore rules that are too noisy for ML/AI development
ignore = [
    "E501",   # line too long (handled by formatter)
    "PLR0913", # too many arguments (common in ML functions)
    "PLR0912", # too many branches (common in training logic)
    "PLR0915", # too many statements (common in training loops)
    "PLR0904", # too many public methods (common in ML classes)
    "PLR0914", # too many local variables (common in training loops)
    "PLR0917", # too many positional arguments (common in ML functions)
    "PLR0911", # too many return statements (common in game logic)
    "C901",    # complex functions (MCTS algorithms, chess logic)
    "PLR2004", # magic value used in comparison (ML hyperparameters)
    "PLC0414", # useless import alias
    "SIM108",  # use ternary operator (sometimes less readable)
    "B008",    # do not perform function calls in argument defaults
    "N806",    # variable name should be lowercase (AI naming conventions)
    "UP007",   # use X | Y for type annotations (compatibility)
    "PERF203", # try-except in loop (common in ML error handling)
    "FURB105", # print-f-string (logging is preferred but not always)
    "NPY002",  # legacy numpy random (required for Numba JIT compatibility)
]

[tool.ruff.lint.isort]
# Import organization optimized for ML/AI development
combine-as-imports = true
force-wrap-aliases = true
known-first-party = []
split-on-trailing-comma = true
known-third-party = ["numpy", "torch", "chess"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pyupgrade]
# Keep union style consistent with codebase
keep-runtime-typing = true

[tool.ruff.format]
# Consistent formatting
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# Match nvim "fixAll" behavior - auto-fix everything possible
docstring-code-format = true
docstring-code-line-length = 80
