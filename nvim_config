-- Minimal, reader-first Neovim (0.11+)
if vim.loader then vim.loader.enable() end
vim.g.mapleader = ' '

-- Essentials only
local o = vim.opt
for k, v in pairs({
  number = true, termguicolors = true, mouse = 'a', clipboard = 'unnamedplus',
  ignorecase = true, smartcase = true, updatetime = 250, scrolloff = 4,
  signcolumn = 'yes', splitright = true, splitbelow = true, undofile = true,
  laststatus = 3, showmode = false, wrap = false,            -- no soft-wraps
  inccommand = 'split',                                      -- live :sub preview
}) do o[k] = v end
o.diffopt:append({ 'linematch:60', 'algorithm:patience' })   -- clearer diffs
o.statusline = '%f %=%l:%c %p%%'
o.formatoptions:remove({ 'c', 'r', 'o' })                    -- no auto-comment on newline
vim.keymap.set('n', '<Esc>', '<cmd>nohlsearch<CR><Esc>', { silent = true })

-- Toggle invisibles on demand (keeps default clean look)
vim.keymap.set('n', '<leader>ti', function() o.list = not o.list:get() end, { desc = 'Toggle invisibles' })

-- --- Minimal plugin bootstrap (still tiny) -----------------------------------
for _, repo in ipairs({
  'ibhagwan/fzf-lua', 'nvim-treesitter/nvim-treesitter',
  'nvim-lua/plenary.nvim', 'lewis6991/gitsigns.nvim', 'sindrets/diffview.nvim',
  'catppuccin/nvim',
}) do
  local leaf = repo:match('([^/]+)$')
  local dir = vim.fn.stdpath('data') .. '/site/pack/plugins/start/' .. leaf
  if not vim.uv.fs_stat(dir) then
    vim.fn.system({ 'git', 'clone', '--depth=1', 'https://github.com/' .. repo, dir })
  end
end

-- --- Root helper (modern, tiny)
local function project_root()
  local r = vim.fs.root(0, { { '.git', '.hg' }, 'pyproject.toml' })
  return r or vim.uv.cwd()
end

-- --- FZF-Lua (iconless, minimal keymaps)
do
  local ok, fzf = pcall(require, 'fzf-lua')
  if ok then
    local noicons = { file_icons = false, git_icons = false, color_icons = false }
    fzf.setup({ files = noicons, grep = noicons, buffers = { file_icons = false, color_icons = false }, oldfiles = noicons })
    local map = function(lhs, rhs) vim.keymap.set('n', lhs, rhs, { silent = true }) end
    map('<leader>sf', function() fzf.files({ cwd = project_root() }) end)
    map('<leader>sg', function() fzf.live_grep({ cwd = project_root() }) end)
    map('<leader>sb', fzf.buffers)
  end
end

-- --- Theme
pcall(vim.cmd.colorscheme, 'catppuccin')

-- --- Treesitter: highlight only (fast)
do local ok, ts = pcall(require, 'nvim-treesitter.configs'); if ok then
  ts.setup({ highlight = { enable = true }, ensure_installed = { 'python', 'c', 'cpp', 'lua', 'vim' }, auto_install = false })
end end

-- --- Git signs (read-first bindings)
do local ok, gs = pcall(require, 'gitsigns'); if ok then
  gs.setup({
    on_attach = function(buf)
      local map = function(lhs, rhs) vim.keymap.set('n', lhs, rhs, { buffer = buf }) end
      map(']h', gs.next_hunk); map('[h', gs.prev_hunk); map('<leader>hp', gs.preview_hunk)
    end
  })
end end

-- --- Diffview: clean PR-style reviews, iconless
pcall(function() require('diffview').setup({ use_icons = false }) end)
vim.keymap.set('n', '<leader>dv', '<cmd>DiffviewOpen<CR>',  { desc = 'Diffview Open' })
vim.keymap.set('n', '<leader>dx', '<cmd>DiffviewClose<CR>', { desc = 'Diffview Close' })
vim.keymap.set('n', '<leader>dh', '<cmd>DiffviewFileHistory %<CR>', { desc = 'Diffview File History' })

-- --- Python & C/C++: sane 4-space indents (buffer-local, zero bloat)
vim.api.nvim_create_autocmd('FileType', { pattern = 'python', callback = function() vim.bo.expandtab, vim.bo.shiftwidth, vim.bo.tabstop = true, 4, 4 end })
vim.api.nvim_create_autocmd('FileType', { pattern = { 'c', 'cpp' }, callback = function() vim.bo.expandtab, vim.bo.shiftwidth, vim.bo.tabstop = true, 4, 4 end })
